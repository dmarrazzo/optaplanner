/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.flightcrewscheduling.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoftlong.HardSoftLongScoreHolder;

import org.optaplanner.examples.flightcrewscheduling.domain.Airport;
import org.optaplanner.examples.flightcrewscheduling.domain.Duty;
import org.optaplanner.examples.flightcrewscheduling.domain.Employee;
import org.optaplanner.examples.flightcrewscheduling.domain.Flight;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightAssignment;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightCrewParametrization;
import org.optaplanner.examples.flightcrewscheduling.domain.Skill;

import accumulate org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction loadBalanceByCount;
import accumulate org.optaplanner.examples.common.solver.drools.functions.LoadBalanceAccumulateFunction loadBalance;

global HardSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

/*
rule "Test Duties"
	when
		Employee( flightAssignmentSet!.size() > 1, $duty : duties["2018-07-15"] )
	then
		System.out.println($duty);
end
*/

rule "Required skill"
    when
        FlightAssignment(employee != null, !getEmployee().hasSkill(getRequiredSkill()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Capitan aircraft type qualification"
    when
    	$capitan : Skill( name == "CP" )
        FlightAssignment( $employee : employee != null, $flight: flight )
        Employee( this == $employee, hasSkill($capitan), !hasAircraftTypeQualification($flight.aircraftType) )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -50);
end


rule "Flight conflict"
    when
        FlightAssignment(employee != null, $employee : employee,
                $flight: flight,
                $leftId : id)
        $fa : FlightAssignment(employee != null, employee == $employee,
                id > $leftId)
        $o : Long( this > 0 ) from $fa.getFlight().overlaps($flight)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$o);
end

rule "Transfer between two flights"
    when
        Employee($cs : connectionStatus)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, - $cs.invalidConnection, - $cs.taxiMinutes );
end

rule "Employee unavailability"
    when
        FlightAssignment(employee != null, !getEmployee().isAvailable(getFlight().getDepartureUTCDate()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "Dayoff distance respect"
    when
        FlightAssignment(employee != null, employee.dayoffRespect(this)>0)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Intraday flights admitted when the aircraft is the same - legs"
	when
        FlightAssignment(employee != null, $employee : employee, $flight: flight)
        FlightAssignment(employee != null, employee == $employee, 
        	flight.departureUTCDate == $flight.departureUTCDate, 
        	flight.aircraftRegistration != $flight.aircraftRegistration )
	then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Maximum dayly FDP"
	when
		Duty ( code == "FD", $over : overMaxFDP )
	then
        scoreHolder.addSoftConstraintMatch(kcontext, -$over);
end

rule "Respect Rest period"
	when
		$employee : Employee()
		$dutyAfter : Duty ( employee == $employee, code != null)
		Duty ( employee == $employee, code != null, isDayAfter($dutyAfter), getRestLack($dutyAfter) > 0 )
	then
        scoreHolder.addSoftConstraintMatch(kcontext, -10);	
end

/*
rule "Minimize crew"
	when
		Employee ( flightAssignmentSet.size() != 0 )
	then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);	
end
*/

//rule "Load balance flight duration total per employee"
//    when
//        FlightCrewParametrization($weight : loadBalanceFlightDurationTotalPerEmployee != 0)
//        accumulate(
//            Employee($total : getFlightDurationTotalInMinutes());
//            $result : loadBalance($total)
//        )
//    then
//        scoreHolder.addSoftConstraintMatch(kcontext, - $weight * $result.getMeanDeviationSquaredSumRootMillis());
//end
