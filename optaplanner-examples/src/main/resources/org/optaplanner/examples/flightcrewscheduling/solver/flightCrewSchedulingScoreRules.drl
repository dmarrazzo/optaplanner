/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.flightcrewscheduling.solver;
dialect "java"

import org.optaplanner.core.api.score.buildin.hardmediumsoftlong.HardMediumSoftLongScoreHolder

import org.optaplanner.examples.flightcrewscheduling.domain.Airport;
import org.optaplanner.examples.flightcrewscheduling.domain.Duty;
import org.optaplanner.examples.flightcrewscheduling.domain.Employee;
import org.optaplanner.examples.flightcrewscheduling.domain.Flight;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightAssignment;
import org.optaplanner.examples.flightcrewscheduling.domain.FlightCrewParametrization;
import org.optaplanner.examples.flightcrewscheduling.domain.Skill;

import accumulate org.optaplanner.examples.common.solver.drools.functions.LoadBalanceByCountAccumulateFunction loadBalanceByCount;
import accumulate org.optaplanner.examples.common.solver.drools.functions.LoadBalanceAccumulateFunction loadBalance;

global HardMediumSoftLongScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "Required skill"
    when
        FlightAssignment(employee != null, !getEmployee().hasSkill(getRequiredSkill()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -20);
end

rule "Capitan aircraft type qualification"
    when
    	$capitan : Skill( name == "CP" )
        FlightAssignment( $employee : employee != null, $flight: flight )
        Employee( this == $employee, hasSkill($capitan), !hasAircraftTypeQualification($flight.aircraftType) )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "First Officer aircraft type qualification"
    when
    	$capitan : Skill( name == "FO" )
        FlightAssignment( $employee : employee != null, $flight: flight )
        Employee( this == $employee, hasSkill($capitan), !hasAircraftTypeQualification($flight.aircraftType) )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "Flight conflict"
    when
        FlightAssignment(employee != null, $employee : employee,
                $flight: flight,
                $leftId : id)
        $fa : FlightAssignment(employee != null, employee == $employee,
                id > $leftId)
        $o : Long( this > 0 ) from $fa.getFlight().overlaps($flight)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -$o);
end

rule "Employee unavailability"
    when
        FlightAssignment(employee != null, !getEmployee().isAvailable(getFlight().getDepartureUTCDate()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -10);
end

rule "Ground duties cannot accept Flight Duties"
	when
		Duty ( code == "GND", isFlightDuty() )
	then
        scoreHolder.addHardConstraintMatch(kcontext, -10);	
end

rule "Standby duties cannot overlap Flight Duties"
	when
		Duty ( code != "GND", code != null , overlap > 0 )
	then
        scoreHolder.addHardConstraintMatch(kcontext, -10);	
end

rule "Respect Rest period"
	when
		$dutyAfter : Duty ( notEmpty(), $rightId : id )
		Duty ( employee == $dutyAfter.employee, id < $rightId, isFlightDuty(), $dutyAfter.isDayAfter(this), getRestLack($dutyAfter) > 0 )
	then
        scoreHolder.addHardConstraintMatch(kcontext, -10);	
end

rule "Duty should finish at home base before day off or ground duty"
	when
		Duty ( dayAfterGroundOrHoliday, getClosingInconvenience() == 10 )
	then
		scoreHolder.addHardConstraintMatch(kcontext, -10);
end

// ############################################################################
// Medium constraints
// ############################################################################


rule "Maximum daily FDP"
	when
		Duty ( isFlightDuty(), $over : overMaxFDP )
	then
        scoreHolder.addMediumConstraintMatch(kcontext, -$over);
end


// Maybe this is an over constrain
rule "Iata flight in not empty duty"
	when
		Duty ( iataFlight != null, notEmpty() )
	then
		scoreHolder.addMediumConstraintMatch(kcontext, -5);
end

// TODO: This should be hard
rule "Dayoff distance respect"
    when
        FlightAssignment(employee != null, employee.dayoffRespect(this)>0)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

// This should be hard but there are exception that are not managed by this constraint
rule "Intraday flights admitted when the aircraft is the same - legs"
	when
        FlightAssignment(employee != null, $employee : employee, $flight: flight, $leftId : id)
        FlightAssignment(employee != null, employee == $employee, 
        	flight.departureUTCDate == $flight.departureUTCDate, 
        	flight.aircraftRegistration != $flight.aircraftRegistration, id > $leftId )
	then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

// Not sure of the following rule
// This should be hard but not sure of the business logic. It could be an overcontraint when not considering acclimatization
/*
rule "Avoid disruptive schedule - late arrival and no local night"
	when
		$d1 : Duty (lateArrival, $employee : employee)
		$d2 : Duty (employee == $employee, isDayAfter($d1))
		Duty (employee == $employee, isDayAfter($d2), getStartingInconvenience()<10, noLocalNight($d2))
	then
		scoreHolder.addMediumConstraintMatch(kcontext, -1);
end
*/

// ############################################################################
// Mixed constraints
// ############################################################################

rule "Transfer between two flights"
    when
        Employee( $cs : connectionStatus, flightAssignmentSet != null, flightAssignmentSet!.size() > 0)
    then
        scoreHolder.addMultiConstraintMatch(kcontext, - $cs.invalidConnection, 0, - $cs.taxiMinutes );
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Home Base Convenience"
	when
		Duty ( isFlightDuty(), $inconvenience : getHomeBaseInconvenience() )
	then
        scoreHolder.addSoftConstraintMatch(kcontext, -$inconvenience);	
end

rule "Minimize iata flight"
	when
		Duty ( iataFlight != null )
	then
		scoreHolder.addSoftConstraintMatch(kcontext, -1);
end
// Not sure of the following rule
/*
rule "Avoid disruptive schedule - night duty and no local night"
	when
		$d1 : Duty (nightDuty, $employee : employee)
		Duty (employee == $employee, isDayAfter($d1), getStartingInconvenience()<10, noLocalNight($d1))
	then
		scoreHolder.addSoftConstraintMatch(kcontext, 100);
end
*/
